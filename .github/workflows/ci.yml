name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  # コード品質チェック
  code-quality:
    name: Code Quality Check
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements-dev.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
        
    - name: Run Black (code formatting check)
      run: |
        black --check --diff src/ tests/
        
    - name: Run isort (import sorting check)
      run: |
        isort --check-only --diff src/ tests/
        
    - name: Run flake8 (linting)
      run: |
        flake8 src/ tests/ --max-line-length=100 --extend-ignore=E203,W503
        
    - name: Run mypy (type checking)
      run: |
        mypy src/ --ignore-missing-imports --no-strict-optional

  # セキュリティチェック
  security:
    name: Security Check
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety
        
    - name: Run bandit (security linting)
      run: |
        bandit -r src/ -f json -o bandit-report.json || true
        bandit -r src/ --severity-level medium
        
    - name: Run safety (dependency vulnerability check)
      run: |
        safety check --json --output safety-report.json || true
        safety check
        
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  # 単体テスト
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    strategy:
      matrix:
        python-version: ['3.11']
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-${{ matrix.python-version }}-pip-${{ hashFiles('**/requirements-dev.txt') }}
        restore-keys: |
          ${{ runner.os }}-${{ matrix.python-version }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
        
    - name: Set up test environment
      run: |
        export ENVIRONMENT=test
        export LOG_LEVEL=DEBUG
        export TEST_DEBUG=true
        export DISABLE_MOCKS=false
        export AWS_DEFAULT_REGION=us-east-1
        export AWS_ACCESS_KEY_ID=test-access-key
        export AWS_SECRET_ACCESS_KEY=test-secret-key
        mkdir -p tests/reports tests/coverage
        
    - name: Run unit tests with coverage
      run: |
        python -m pytest tests/unit/ \
          --verbose \
          --tb=short \
          --cov=src \
          --cov-report=xml:tests/coverage/unit-coverage.xml \
          --cov-report=html:tests/coverage/unit-html \
          --cov-report=term \
          --junitxml=tests/reports/unit-results.xml \
          --maxfail=5 \
          --durations=10
          
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: unit-test-results-${{ matrix.python-version }}
        path: |
          tests/reports/
          tests/coverage/
          
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: tests/coverage/unit-coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  # 統合テスト
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: [code-quality, unit-tests]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements-dev.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
        
    - name: Set up test environment
      run: |
        export ENVIRONMENT=test
        export LOG_LEVEL=DEBUG
        export TEST_DEBUG=true
        export DISABLE_MOCKS=false
        export AWS_DEFAULT_REGION=us-east-1
        export AWS_ACCESS_KEY_ID=test-access-key
        export AWS_SECRET_ACCESS_KEY=test-secret-key
        mkdir -p tests/reports
        
    - name: Run integration tests
      run: |
        python -m pytest tests/integration/ \
          --verbose \
          --tb=short \
          --junitxml=tests/reports/integration-results.xml \
          --maxfail=3 \
          --durations=10 \
          -m "integration"
          
    - name: Upload integration test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: integration-test-results
        path: tests/reports/

  # SAMビルド検証
  sam-build:
    name: SAM Build Validation
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [code-quality]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Set up SAM CLI
      uses: aws-actions/setup-sam@v2
      with:
        use-installer: true
        
    - name: Cache SAM dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.aws-sam/cache
        key: ${{ runner.os }}-sam-${{ hashFiles('**/template.yaml') }}
        restore-keys: |
          ${{ runner.os }}-sam-
          
    - name: SAM Build
      run: |
        sam build --use-container
        
    - name: SAM Validate
      run: |
        sam validate --lint
        
    - name: Upload SAM artifacts
      uses: actions/upload-artifact@v3
      with:
        name: sam-build-artifacts
        path: .aws-sam/build/

  # テスト結果サマリー
  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, security, sam-build]
    if: always()
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v3
      with:
        path: ./artifacts
        
    - name: Generate test summary
      run: |
        echo "## CI Pipeline Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # ジョブ結果のサマリー
        echo "### Job Results" >> $GITHUB_STEP_SUMMARY
        echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Code Quality | ${{ needs.code-quality.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Security Check | ${{ needs.security.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Unit Tests | ${{ needs.unit-tests.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Integration Tests | ${{ needs.integration-tests.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| SAM Build | ${{ needs.sam-build.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # テスト結果の詳細
        if [ -d "./artifacts" ]; then
          echo "### Test Artifacts" >> $GITHUB_STEP_SUMMARY
          find ./artifacts -name "*.xml" -o -name "*.json" | while read file; do
            echo "- $(basename "$file")" >> $GITHUB_STEP_SUMMARY
          done
        fi
        
        # 全体の成功/失敗判定
        if [[ "${{ needs.unit-tests.result }}" == "success" && "${{ needs.integration-tests.result }}" == "success" && "${{ needs.code-quality.result }}" == "success" ]]; then
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🎉 **All tests passed!** Ready for deployment." >> $GITHUB_STEP_SUMMARY
        else
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "❌ **Some tests failed.** Please review the results." >> $GITHUB_STEP_SUMMARY
        fi

  # 失敗時のSlack通知
  notify-failure:
    name: Notify Failure
    runs-on: ubuntu-latest
    needs: [code-quality, security, unit-tests, integration-tests, sam-build]
    if: failure() && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    
    steps:
    - name: Notify Slack on failure
      if: env.SLACK_CI_WEBHOOK != ''
      env:
        SLACK_CI_WEBHOOK: ${{ secrets.SLACK_CI_WEBHOOK }}
      run: |
        curl -X POST -H 'Content-type: application/json' \
          --data "{
            \"text\": \"🚨 CI Pipeline Failed\",
            \"blocks\": [
              {
                \"type\": \"section\",
                \"text\": {
                  \"type\": \"mrkdwn\",
                  \"text\": \"*CI Pipeline Failed* :x:\n\n*Repository:* ${{ github.repository }}\n*Branch:* ${{ github.ref_name }}\n*Commit:* ${{ github.sha }}\n*Actor:* ${{ github.actor }}\"
                }
              },
              {
                \"type\": \"section\",
                \"text\": {
                  \"type\": \"mrkdwn\",
                  \"text\": \"*Failed Jobs:*\n• Code Quality: ${{ needs.code-quality.result }}\n• Security: ${{ needs.security.result }}\n• Unit Tests: ${{ needs.unit-tests.result }}\n• Integration Tests: ${{ needs.integration-tests.result }}\n• SAM Build: ${{ needs.sam-build.result }}\"
                }
              },
              {
                \"type\": \"actions\",
                \"elements\": [
                  {
                    \"type\": \"button\",
                    \"text\": {
                      \"type\": \"plain_text\",
                      \"text\": \"View Details\"
                    },
                    \"url\": \"${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}\"
                  }
                ]
              }
            ]
          }" \
          "$SLACK_CI_WEBHOOK"
name: Deploy Pipeline

on:
  push:
    branches:
      - main
      - develop
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'dev'
        type: choice
        options:
        - dev
        - staging
        - prod
      force_deploy:
        description: 'Force deployment (skip checks)'
        required: false
        default: false
        type: boolean

env:
  PYTHON_VERSION: '3.11'
  SAM_CLI_VERSION: latest

jobs:
  # 環境判定
  determine-environment:
    name: Determine Environment
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.env.outputs.environment }}
      should_deploy: ${{ steps.env.outputs.should_deploy }}
      
    steps:
    - name: Determine deployment environment
      id: env
      run: |
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
          echo "should_deploy=true" >> $GITHUB_OUTPUT
        elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
          echo "environment=staging" >> $GITHUB_OUTPUT
          echo "should_deploy=true" >> $GITHUB_OUTPUT
        elif [[ "${{ github.ref }}" == "refs/heads/develop" ]]; then
          echo "environment=dev" >> $GITHUB_OUTPUT
          echo "should_deploy=true" >> $GITHUB_OUTPUT
        else
          echo "environment=none" >> $GITHUB_OUTPUT
          echo "should_deploy=false" >> $GITHUB_OUTPUT
        fi
        
        echo "Environment: $(cat $GITHUB_OUTPUT | grep environment | cut -d'=' -f2)"
        echo "Should deploy: $(cat $GITHUB_OUTPUT | grep should_deploy | cut -d'=' -f2)"

  # CI パイプライン実行
  ci:
    name: Run CI Pipeline
    uses: ./.github/workflows/ci.yml
    if: needs.determine-environment.outputs.should_deploy == 'true'
    needs: determine-environment
    secrets: inherit

  # デプロイ前チェック
  pre-deploy-checks:
    name: Pre-deployment Checks
    runs-on: ubuntu-latest
    needs: [determine-environment, ci]
    if: needs.determine-environment.outputs.should_deploy == 'true' && (success() || github.event.inputs.force_deploy == 'true')
    
    environment: ${{ needs.determine-environment.outputs.environment }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Check deployment readiness
      run: |
        echo "🔍 Checking deployment readiness for ${{ needs.determine-environment.outputs.environment }}"
        
        # 必要なシークレットの確認
        if [[ "${{ needs.determine-environment.outputs.environment }}" == "prod" ]]; then
          if [[ -z "${{ secrets.PROD_AWS_ACCESS_KEY_ID }}" ]]; then
            echo "❌ Production AWS credentials not configured"
            exit 1
          fi
        fi
        
        # SAMテンプレートの存在確認
        if [[ ! -f "template.yaml" ]]; then
          echo "❌ SAM template not found"
          exit 1
        fi
        
        # samconfig.tomlの確認
        if [[ ! -f "samconfig.toml" ]]; then
          echo "❌ SAM config not found"
          exit 1
        fi
        
        echo "✅ Deployment readiness check passed"

  # デプロイ実行
  deploy:
    name: Deploy to ${{ needs.determine-environment.outputs.environment }}
    runs-on: ubuntu-latest
    needs: [determine-environment, ci, pre-deploy-checks]
    if: needs.determine-environment.outputs.should_deploy == 'true' && (success() || github.event.inputs.force_deploy == 'true')
    
    environment: ${{ needs.determine-environment.outputs.environment }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Set up SAM CLI
      uses: aws-actions/setup-sam@v2
      with:
        use-installer: true
        version: ${{ env.SAM_CLI_VERSION }}
        
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ needs.determine-environment.outputs.environment == 'prod' && secrets.PROD_AWS_ACCESS_KEY_ID || secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ needs.determine-environment.outputs.environment == 'prod' && secrets.PROD_AWS_SECRET_ACCESS_KEY || secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ vars.AWS_REGION || 'us-east-1' }}
        
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/pip
          ~/.aws-sam/cache
        key: ${{ runner.os }}-deploy-${{ hashFiles('**/requirements.txt', '**/template.yaml') }}
        restore-keys: |
          ${{ runner.os }}-deploy-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: SAM Build
      run: |
        sam build --use-container
        
    - name: SAM Deploy
      env:
        ENVIRONMENT: ${{ needs.determine-environment.outputs.environment }}
      run: |
        # 環境別のパラメータ設定
        PARAM_OVERRIDES=""
        
        if [[ "$ENVIRONMENT" == "prod" ]]; then
          PARAM_OVERRIDES="Environment=prod"
          if [[ -n "${{ secrets.PROD_SLACK_WEBHOOK_URL }}" ]]; then
            PARAM_OVERRIDES="$PARAM_OVERRIDES SlackWebhookUrl=${{ secrets.PROD_SLACK_WEBHOOK_URL }}"
          fi
          if [[ -n "${{ secrets.PROD_GOOGLE_SHEETS_SPREADSHEET_ID }}" ]]; then
            PARAM_OVERRIDES="$PARAM_OVERRIDES GoogleSheetsSpreadsheetId=${{ secrets.PROD_GOOGLE_SHEETS_SPREADSHEET_ID }}"
          fi
          if [[ -n "${{ secrets.PROD_GOOGLE_SHEETS_CREDENTIALS }}" ]]; then
            PARAM_OVERRIDES="$PARAM_OVERRIDES GoogleSheetsCredentials=${{ secrets.PROD_GOOGLE_SHEETS_CREDENTIALS }}"
          fi
          if [[ -n "${{ secrets.PROD_GEMINI_API_KEY }}" ]]; then
            PARAM_OVERRIDES="$PARAM_OVERRIDES GeminiApiKey=${{ secrets.PROD_GEMINI_API_KEY }}"
          fi
        elif [[ "$ENVIRONMENT" == "staging" ]]; then
          PARAM_OVERRIDES="Environment=staging"
          if [[ -n "${{ secrets.STAGING_SLACK_WEBHOOK_URL }}" ]]; then
            PARAM_OVERRIDES="$PARAM_OVERRIDES SlackWebhookUrl=${{ secrets.STAGING_SLACK_WEBHOOK_URL }}"
          fi
          if [[ -n "${{ secrets.STAGING_GOOGLE_SHEETS_SPREADSHEET_ID }}" ]]; then
            PARAM_OVERRIDES="$PARAM_OVERRIDES GoogleSheetsSpreadsheetId=${{ secrets.STAGING_GOOGLE_SHEETS_SPREADSHEET_ID }}"
          fi
          if [[ -n "${{ secrets.STAGING_GOOGLE_SHEETS_CREDENTIALS }}" ]]; then
            PARAM_OVERRIDES="$PARAM_OVERRIDES GoogleSheetsCredentials=${{ secrets.STAGING_GOOGLE_SHEETS_CREDENTIALS }}"
          fi
          if [[ -n "${{ secrets.STAGING_GEMINI_API_KEY }}" ]]; then
            PARAM_OVERRIDES="$PARAM_OVERRIDES GeminiApiKey=${{ secrets.STAGING_GEMINI_API_KEY }}"
          fi
        else
          PARAM_OVERRIDES="Environment=dev"
          if [[ -n "${{ secrets.DEV_SLACK_WEBHOOK_URL }}" ]]; then
            PARAM_OVERRIDES="$PARAM_OVERRIDES SlackWebhookUrl=${{ secrets.DEV_SLACK_WEBHOOK_URL }}"
          fi
          if [[ -n "${{ secrets.DEV_GOOGLE_SHEETS_SPREADSHEET_ID }}" ]]; then
            PARAM_OVERRIDES="$PARAM_OVERRIDES GoogleSheetsSpreadsheetId=${{ secrets.DEV_GOOGLE_SHEETS_SPREADSHEET_ID }}"
          fi
          if [[ -n "${{ secrets.DEV_GOOGLE_SHEETS_CREDENTIALS }}" ]]; then
            PARAM_OVERRIDES="$PARAM_OVERRIDES GoogleSheetsCredentials=${{ secrets.DEV_GOOGLE_SHEETS_CREDENTIALS }}"
          fi
          if [[ -n "${{ secrets.DEV_GEMINI_API_KEY }}" ]]; then
            PARAM_OVERRIDES="$PARAM_OVERRIDES GeminiApiKey=${{ secrets.DEV_GEMINI_API_KEY }}"
          fi
        fi
        
        echo "🚀 Deploying to $ENVIRONMENT environment"
        echo "Parameters: $PARAM_OVERRIDES"
        
        sam deploy \
          --config-env $ENVIRONMENT \
          --no-confirm-changeset \
          --no-fail-on-empty-changeset \
          --parameter-overrides $PARAM_OVERRIDES
          
    - name: Get deployment outputs
      id: outputs
      run: |
        STACK_NAME="stock-analysis-${{ needs.determine-environment.outputs.environment }}"
        
        # スタック出力の取得
        FUNCTION_NAME=$(aws cloudformation describe-stacks \
          --stack-name $STACK_NAME \
          --query 'Stacks[0].Outputs[?OutputKey==`StockAnalysisFunctionName`].OutputValue' \
          --output text)
          
        FUNCTION_ARN=$(aws cloudformation describe-stacks \
          --stack-name $STACK_NAME \
          --query 'Stacks[0].Outputs[?OutputKey==`StockAnalysisFunctionArn`].OutputValue' \
          --output text)
          
        echo "function_name=$FUNCTION_NAME" >> $GITHUB_OUTPUT
        echo "function_arn=$FUNCTION_ARN" >> $GITHUB_OUTPUT
        
        echo "📋 Deployment completed:"
        echo "  Function Name: $FUNCTION_NAME"
        echo "  Function ARN: $FUNCTION_ARN"

  # デプロイ後テスト
  post-deploy-tests:
    name: Post-deployment Tests
    runs-on: ubuntu-latest
    needs: [determine-environment, deploy]
    if: needs.determine-environment.outputs.should_deploy == 'true' && success()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ needs.determine-environment.outputs.environment == 'prod' && secrets.PROD_AWS_ACCESS_KEY_ID || secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ needs.determine-environment.outputs.environment == 'prod' && secrets.PROD_AWS_SECRET_ACCESS_KEY || secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ vars.AWS_REGION || 'us-east-1' }}
        
    - name: Run health check
      run: |
        ENVIRONMENT="${{ needs.determine-environment.outputs.environment }}"
        FUNCTION_NAME="stock-analysis-$ENVIRONMENT"
        
        echo "🔍 Running health check for $FUNCTION_NAME"
        
        # Lambda関数の存在確認
        if aws lambda get-function --function-name $FUNCTION_NAME >/dev/null 2>&1; then
          echo "✅ Lambda function exists: $FUNCTION_NAME"
        else
          echo "❌ Lambda function not found: $FUNCTION_NAME"
          exit 1
        fi
        
        # Parameter Store設定確認
        PREFIX="/stock-analysis-$ENVIRONMENT"
        PARAM_COUNT=$(aws ssm get-parameters-by-path --path $PREFIX --recursive --query 'Parameters | length(@)' --output text)
        
        if [[ $PARAM_COUNT -gt 0 ]]; then
          echo "✅ Parameter Store configured: $PARAM_COUNT parameters"
        else
          echo "⚠️ Warning: No parameters found in Parameter Store"
        fi
        
        # EventBridge ルール確認
        DAILY_RULE="stock-analysis-daily-$ENVIRONMENT"
        if aws events describe-rule --name $DAILY_RULE >/dev/null 2>&1; then
          echo "✅ EventBridge rule exists: $DAILY_RULE"
        else
          echo "❌ EventBridge rule not found: $DAILY_RULE"
          exit 1
        fi
        
        echo "🎉 Health check completed successfully"
        
    - name: Run smoke test (non-prod only)
      if: needs.determine-environment.outputs.environment != 'prod'
      run: |
        FUNCTION_NAME="stock-analysis-${{ needs.determine-environment.outputs.environment }}"
        
        echo "🧪 Running smoke test for $FUNCTION_NAME"
        
        # テスト用ペイロード
        TEST_PAYLOAD='{
          "source": "test",
          "detail-type": "Health Check",
          "detail": {
            "test_mode": true,
            "analysis_type": "daily"
          }
        }'
        
        # Lambda関数を実行
        RESPONSE=$(aws lambda invoke \
          --function-name $FUNCTION_NAME \
          --payload "$TEST_PAYLOAD" \
          --output json \
          /tmp/response.json)
          
        STATUS_CODE=$(echo $RESPONSE | jq -r '.StatusCode')
        
        if [[ $STATUS_CODE -eq 200 ]]; then
          echo "✅ Smoke test passed: Status code $STATUS_CODE"
          echo "Response: $(cat /tmp/response.json)"
        else
          echo "❌ Smoke test failed: Status code $STATUS_CODE"
          echo "Response: $(cat /tmp/response.json)"
          exit 1
        fi

  # 本番デプロイ承認 (本番環境のみ)
  prod-approval:
    name: Production Deployment Approval
    runs-on: ubuntu-latest
    needs: [determine-environment, post-deploy-tests]
    if: needs.determine-environment.outputs.environment == 'staging' && success()
    environment: production-approval
    
    steps:
    - name: Request production deployment approval
      run: |
        echo "🚨 Production deployment requires manual approval"
        echo "Staging deployment completed successfully."
        echo "Ready to deploy to production."

  # 本番デプロイ
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [determine-environment, prod-approval]
    if: needs.determine-environment.outputs.environment == 'staging' && success()
    environment: prod
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Set up SAM CLI
      uses: aws-actions/setup-sam@v2
      with:
        use-installer: true
        
    - name: Configure AWS credentials for production
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.PROD_AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.PROD_AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ vars.AWS_REGION || 'us-east-1' }}
        
    - name: Deploy to production
      run: |
        echo "🚀 Deploying to production environment"
        
        sam build --use-container
        
        sam deploy \
          --config-env prod \
          --no-confirm-changeset \
          --no-fail-on-empty-changeset \
          --parameter-overrides \
            Environment=prod \
            SlackWebhookUrl=${{ secrets.PROD_SLACK_WEBHOOK_URL }} \
            GoogleSheetsSpreadsheetId=${{ secrets.PROD_GOOGLE_SHEETS_SPREADSHEET_ID }} \
            GoogleSheetsCredentials="${{ secrets.PROD_GOOGLE_SHEETS_CREDENTIALS }}" \
            GeminiApiKey=${{ secrets.PROD_GEMINI_API_KEY }}

  # デプロイ通知
  notify-deployment:
    name: Notify Deployment
    runs-on: ubuntu-latest
    needs: [determine-environment, deploy, post-deploy-tests]
    if: always() && needs.determine-environment.outputs.should_deploy == 'true'
    
    steps:
    - name: Notify Slack on success
      if: success() && env.SLACK_CI_WEBHOOK != ''
      env:
        SLACK_CI_WEBHOOK: ${{ secrets.SLACK_CI_WEBHOOK }}
      run: |
        curl -X POST -H 'Content-type: application/json' \
          --data "{
            \"text\": \"🚀 Deployment Successful\",
            \"blocks\": [
              {
                \"type\": \"section\",
                \"text\": {
                  \"type\": \"mrkdwn\",
                  \"text\": \"*Deployment Successful* :white_check_mark:\n\n*Environment:* ${{ needs.determine-environment.outputs.environment }}\n*Repository:* ${{ github.repository }}\n*Branch:* ${{ github.ref_name }}\n*Commit:* ${{ github.sha }}\n*Actor:* ${{ github.actor }}\"
                }
              },
              {
                \"type\": \"actions\",
                \"elements\": [
                  {
                    \"type\": \"button\",
                    \"text\": {
                      \"type\": \"plain_text\",
                      \"text\": \"View Deployment\"
                    },
                    \"url\": \"${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}\"
                  }
                ]
              }
            ]
          }" \
          "$SLACK_CI_WEBHOOK"
          
    - name: Notify Slack on failure
      if: failure() && env.SLACK_CI_WEBHOOK != ''
      env:
        SLACK_CI_WEBHOOK: ${{ secrets.SLACK_CI_WEBHOOK }}
      run: |
        curl -X POST -H 'Content-type: application/json' \
          --data "{
            \"text\": \"🚨 Deployment Failed\",
            \"blocks\": [
              {
                \"type\": \"section\",
                \"text\": {
                  \"type\": \"mrkdwn\",
                  \"text\": \"*Deployment Failed* :x:\n\n*Environment:* ${{ needs.determine-environment.outputs.environment }}\n*Repository:* ${{ github.repository }}\n*Branch:* ${{ github.ref_name }}\n*Commit:* ${{ github.sha }}\n*Actor:* ${{ github.actor }}\"
                }
              },
              {
                \"type\": \"actions\",
                \"elements\": [
                  {
                    \"type\": \"button\",
                    \"text\": {
                      \"type\": \"plain_text\",
                      \"text\": \"View Details\"
                    },
                    \"url\": \"${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}\"
                  }
                ]
              }
            ]
          }" \
          "$SLACK_CI_WEBHOOK"